{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let UserRegisterComponent = class UserRegisterComponent {\n  constructor(fb, authService, alertify) {\n    this.fb = fb;\n    this.authService = authService;\n    this.alertify = alertify;\n  }\n  ngOnInit() {\n    // this.registerationForm = new FormGroup({\n    //   userName: new FormControl(null, Validators.required),\n    //   email: new FormControl(null, [Validators.required, Validators.email]),\n    //   password: new FormControl(null, [Validators.required, Validators.minLength(8)]),\n    //   confirmPassword: new FormControl(null, [Validators.required]),\n    //   mobile: new FormControl(null, [Validators.required, Validators.maxLength(10)])\n    // }, this.passwordMatchingValidatior);\n    this.createRegisterationForm();\n    // this.registerationForm.controls['userName'].setValue('Default Value');\n  }\n\n  createRegisterationForm() {\n    this.registerationForm = this.fb.group({\n      userName: [null, Validators.required],\n      email: [null, [Validators.required, Validators.email]],\n      password: [null, [Validators.required, Validators.minLength(8)]],\n      confirmPassword: [null, Validators.required],\n      mobile: [null, [Validators.required, Validators.maxLength(10)]]\n    }, {\n      validators: this.passwordMatchingValidatior\n    });\n  }\n  passwordMatchingValidatior(fg) {\n    return fg.get('password').value === fg.get('confirmPassword').value ? null : {\n      notmatched: true\n    };\n  }\n  onSubmit() {\n    console.log(this.registerationForm.value);\n    this.userSubmitted = true;\n    if (this.registerationForm.valid) {\n      // this.user = Object.assign(this.user, this.registerationForm.value);\n      this.authService.registerUser(this.userData()).subscribe(() => {\n        this.onReset();\n        this.alertify.success('Congrats, you are successfully registered');\n      });\n    }\n  }\n  onReset() {\n    this.userSubmitted = false;\n    this.registerationForm.reset();\n  }\n  userData() {\n    return this.user = {\n      userName: this.userName.value,\n      email: this.email.value,\n      password: this.password.value,\n      mobile: this.mobile.value\n    };\n  }\n  // ------------------------------------\n  // Getter methods for all form controls\n  // ------------------------------------\n  get userName() {\n    return this.registerationForm.get('userName');\n  }\n  get email() {\n    return this.registerationForm.get('email');\n  }\n  get password() {\n    return this.registerationForm.get('password');\n  }\n  get confirmPassword() {\n    return this.registerationForm.get('confirmPassword');\n  }\n  get mobile() {\n    return this.registerationForm.get('mobile');\n  }\n};\nUserRegisterComponent = __decorate([Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})], UserRegisterComponent);","map":{"version":3,"names":["Component","Validators","UserRegisterComponent","constructor","fb","authService","alertify","ngOnInit","createRegisterationForm","registerationForm","group","userName","required","email","password","minLength","confirmPassword","mobile","maxLength","validators","passwordMatchingValidatior","fg","get","value","notmatched","onSubmit","console","log","userSubmitted","valid","registerUser","userData","subscribe","onReset","success","reset","user","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\sagar\\Desktop\\df\\dotnet projects\\real_estate\\client\\src\\app\\user\\user-register\\user-register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { UserForRegister } from 'src/app/model/user';\nimport { AlertifyService } from 'src/app/services/alertify.service';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n    selector: 'app-user-register',\n    templateUrl: './user-register.component.html',\n    styleUrls: ['./user-register.component.css']\n})\nexport class UserRegisterComponent implements OnInit {\n\n    registerationForm: FormGroup;\n    user: UserForRegister;\n    userSubmitted: boolean;\n    constructor(private fb: FormBuilder,\n                private authService: AuthService,\n                private alertify: AlertifyService ) { }\n\n    ngOnInit() {\n    // this.registerationForm = new FormGroup({\n    //   userName: new FormControl(null, Validators.required),\n    //   email: new FormControl(null, [Validators.required, Validators.email]),\n    //   password: new FormControl(null, [Validators.required, Validators.minLength(8)]),\n    //   confirmPassword: new FormControl(null, [Validators.required]),\n    //   mobile: new FormControl(null, [Validators.required, Validators.maxLength(10)])\n    // }, this.passwordMatchingValidatior);\n        this.createRegisterationForm();\n    // this.registerationForm.controls['userName'].setValue('Default Value');\n    }\n\n    createRegisterationForm() {\n        this.registerationForm =  this.fb.group({\n            userName: [null, Validators.required],\n            email: [null, [Validators.required, Validators.email]],\n            password: [null, [Validators.required, Validators.minLength(8)]],\n            confirmPassword: [null, Validators.required],\n            mobile: [null, [Validators.required, Validators.maxLength(10)]]\n        }, {validators: this.passwordMatchingValidatior});\n    }\n\n    passwordMatchingValidatior(fg: FormGroup): Validators {\n        return fg.get('password').value === fg.get('confirmPassword').value ? null :\n            {notmatched: true};\n    }\n\n\n    onSubmit() {\n        console.log(this.registerationForm.value);\n        this.userSubmitted = true;\n\n        if (this.registerationForm.valid) {\n            // this.user = Object.assign(this.user, this.registerationForm.value);\n            this.authService.registerUser(this.userData()).subscribe(() =>\n            {\n                this.onReset();\n                this.alertify.success('Congrats, you are successfully registered');\n            });\n        }\n    }\n\n    onReset() {\n        this.userSubmitted = false;\n        this.registerationForm.reset();\n    }\n\n\n    userData(): UserForRegister {\n        return this.user = {\n            userName: this.userName.value,\n            email: this.email.value,\n            password: this.password.value,\n            mobile: this.mobile.value\n        };\n    }\n\n    // ------------------------------------\n    // Getter methods for all form controls\n    // ------------------------------------\n    get userName() {\n        return this.registerationForm.get('userName') as FormControl;\n    }\n\n    get email() {\n        return this.registerationForm.get('email') as FormControl;\n    }\n    get password() {\n        return this.registerationForm.get('password') as FormControl;\n    }\n    get confirmPassword() {\n        return this.registerationForm.get('confirmPassword') as FormControl;\n    }\n    get mobile() {\n        return this.registerationForm.get('mobile') as FormControl;\n    }\n    // ------------------------\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}